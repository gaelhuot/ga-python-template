name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: 
          - "3.9"
          - "3.10" 
          - "3.11"
          - "3.12"

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Debug matrix values
      run: |
        echo "Matrix python-version: ${{ matrix.python-version }}"
        echo "Job name: ${{ github.job }}"
        echo "Workflow run ID: ${{ github.run_id }}"

    - name: Verify Python version
      run: |
        python --version
        if [[ "$(python --version)" != *"3.9"* && "$(python --version)" != *"3.10"* && "$(python --version)" != *"3.11"* && "$(python --version)" != *"3.12"* ]]; then
          echo "❌ Unexpected Python version detected: $(python --version)"
          echo "Expected one of: 3.9, 3.10, 3.11, 3.12"
          exit 1
        else
          echo "✅ Correct Python version detected: $(python --version)"
        fi

    - name: Clear Python cache
      run: |
        python -m pip cache purge || echo "No pip cache to clear"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: pytest

    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Black formatter check
      run: black --check app tests

    - name: Run isort import sorter check
      run: isort --check-only app tests

    - name: Run flake8 linter
      run: flake8 app tests

    - name: Run mypy type checker
      run: mypy app

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run safety check
      run: |
        pip install safety
        safety check || echo "Safety check completed with warnings"

    - name: Run bandit security linter
      run: |
        pip install bandit
        bandit -r app -f json -o bandit-report.json || echo "Bandit scan completed with findings"

    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
        if-no-files-found: ignore

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
